# config file for WINTER

########## SERIAL BUS DEVICES ##########
# USB-Serial Devices
usb_serial_dev:
    chiller: '/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AQ00T8I9-if00-port0'
    steppers: '/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AG0JG9J3-if00-port0'
    

########## WINTERCMD COMMANDING ##########
wintercmd_server_addr: 'localhost'
wintercmd_server_port: 7000
# trusted hosts (whitelist). allow commands from these machines
wintercmd_trusted_hosts:
    -127.0.0.1
    -127.0.1.1
    -192.168.1.10
    -192.168.1.11

########## SCHEDULING ##########
# location of the schedule files (base directory + this directory)
scheduleFile_directory: 'schedule/scheduleFiles'
scheduleFile_nightly_prefix: 'WINTER_NightlySchedule_'

# dither table
dither_file: 'config/dither_list.conf'

# telescope
telescope:
    host: "thor"
    port: 8220

# commanding (seconds)
cmd_timeout: 10.0
cmd_status_dt: 0.25

########### HOUSEKEEPING ##########


# define update times (ms)
daq_dt:
    hk: 500.0
    fast: 500.0
    slow: 500.0
    very_slow: 2000.0

# this will crash if this is not greater than or equal to the max daq_dt
write_dt: 500.0

# where to put the data. base directory is home
housekeeping_data_directory: 'data/rawdir'
housekeeping_data_link_directory: 'data'
housekeeping_data_link_name: 'dm.lnk'

# where to put the log. base directory is home
log_directory: 'data/log'
log_link_directory: 'data'
log_link_name: 'winter.log'


# define telescope home position
telescope_home:
    alt_degs: 16.0
    az_degs: 290.0

# define telemetry servers
telemetry_server:
    addr:  '198.202.125.214'
    port: 4698
    cmd: 'WEATHER_JSON'
    endchar: '}]'
    timeout: 0.1

command_server:
    addr: '198.202.125.142'
    port: 62000
    cmd: 'status?'
    endchar: '}'
    timeout: 0.1
    

# dictionaries to interpret the status from the weather servers
# *NOTE*: it's best to use keys in quoatations to avoid the yaml loader converting them
#   for example, yaml loads key = YES as a boolean True value, but "YES" as a string
#P48_Status_Dict:
#    P48_Wetness:
#            'YES': 1
#            'NO': 0
#        P48_Weather_Status:
#            'READY': 1
#            'UNKNOWN': 0
Dome_Status_Dict:
    ## Palomar Command Server
    Dome_Status:
        'OFF': 0
        'STOPPED': 1
        'STOWED': 2
        'GO_TO': 3
        'UNKNOWN': -10
        'FAULT': -20
        'HOMING' : -30
    Home_Status:
        'READY': 1
        'NOT_READY' : 0
    
    Shutter_Status:
        'OPEN': 1
        'OPENING': 5
        'CLOSED': -1
        'CLOSING': -5
        'STOPPED': 0
        'FAULT': -20

    Control_Status:
        'AVAILABLE': 0
        'REMOTE': 1
        'CONSOLE': 2
        'MANUAL': 3

    Close_Status:
        'READY': 1
        'NOT_READY': 0

    Weather_Status:
        'READY': 1
        'NOT_READY': 0
        
    Sunlight_Status:
        'READY': 1
        'NOT_READY': 0
        
    Wetness_Status:
        'READY': 1
        'NOT_READY': 0
        
    Faults:
        0x1:
            msg: 'Dome Drive Communication Lost'
            field : 'Fault_Dome_Drive_Comm'
        0x2: 
            msg: 'PLC Communication Lost'
            field: 'Fault_PLC_Comm'
        0x4: 
            msg: 'Weather Communication Lost'
            field: 'Fault_Weather_Comm'
        0x8: 
            msg: 'Fire Alarm'
            field: 'Fault_Fire_Alarm'
        0x10: 
            msg: 'Door Open'
            field: 'Fault_Door_Open'
        0x20: 
            msg: 'ESTOP'
            field: 'Fault_ESTOP'
        0x40: 
            msg: 'Drive Over Temp'
            field: 'Fault_Over_Temp'
        0x80:
            msg: 'Drive Internal Voltage'
            field: 'Fault_Drive_Internal_Voltage'
        0x100: 
            msg: 'Drive Over Voltage'
            field: 'Fault_Drive_Over_Voltage'
        0x200: 
            msg: 'Drive Over Current'
            field: 'Fault_Drive_Over_Current'
        0x400: 
            msg: 'Drive Motor Open Winding'
            field: 'Fault_Drive_Motor_Open_Winding'
        0x800: 
            msg: 'Drive Bad Encoder'
            field: 'Fault_Drive_Bad_Encoder'

# weather limits
weather_limits:
    TEMP_OUT:
        MIN: -20
        MAX: 50
    TEMP_IN:
        MIN: -20
        MAX: 50
    RH_OUT:
        MIN: -100
        MAX: 100
    RH_IN:
        MIN: -100
        MAX: 100
    WIND_GUST:
        MIN: 0
        MAX: 35
    WIND_SPEED:
        MIN: 0
        MAX: 30
    DEWPOINT_IN:
        MIN: -100
        MAX: 100
    DEWPOINT_OUT:
        MIN: -100
        MAX: 100
    # these are from clear dark skies:
    TRANSPARENCY:
        MIN: 3 # average
        MAX: 5 # transparent
    SEEING:
        MIN: 3 # average
        MAX: 5 # excellent
    CLOUDS:
        MIN: 7 # 30pct covered
        MAX: 10 # CLEAR



# default value for housekeeping fields
default_value: -999

### Labjack Definitions ###
labjacks:
    lj0:
        config: 'labjack0_config.yaml'
        




# define fields.
# Note: each rate must have a corresponding "daq_rate" as given above
fields:
#general:
    fcount:
        ftype: raw
        label: 'count'
        units: None
        dtype: float64
        rate: fast
        var: 'index'
    ftime:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: fast
        var: 'timestamp'

    scount:
        ftype: raw
        label: 'count'
        units: None
        dtype: float64
        rate: slow
        var: 'index'
    stime:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'timestamp'
    testcount:
        ftype: raw
        label: 'count'
        units: None
        dtype: float64
        rate: 'hk'
        var: 'counter.state["count"]'
#schedule
    az_scheduled:
        ftype: raw
        label: 'Az'
        units: deg
        dtype: float64
        rate: slow
        var: "schedule.scheduleExec.az_scheduled"
    alt_scheduled:
        ftype: raw
        label: 'Alt'
        units: deg
        dtype: float64
        rate: slow
        var: "schedule.scheduleExec.alt_scheduled"
    current_field_alt:
        ftype: raw
        label: 'Alt'
        units: deg
        dtype: float64
        rate: slow
        var: "schedule.scheduleExec.current_field_alt"
    current_field_az:
        ftype: raw
        label: 'Alt'
        units: deg
        dtype: float64
        rate: slow
        var: "schedule.scheduleExec.current_field_az"
#telescope
    pwi4_version_field0:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[0]"]
    pwi4_version_field1:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[1]"]
    pwi4_version_field2:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[2]"]
    pwi4_version_field3:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[3]"]
    telescope_timestamp_utc:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["response.timestamp_utc"]
    site_latitude_degs:
        ftype: raw
        label: Latitude
        units: deg
        dtype: float64
        rate: fast
        var: telescope.state["site.latitude_degs"]
    site_longitude_degs:
        ftype: raw
        label: Longitude
        units: deg
        dtype: float64
        rate: fast
        var: telescope.state["site.longitude_degs"]
    site_height_meters:
        ftype: raw
        label: Height
        units: m
        dtype: float64
        rate: fast
        var: telescope.state["site.height_meters"]
    site_lmst_hours:
        ftype: raw
        label: LMST
        units: hours
        dtype: float64
        rate: fast
        var: telescope.state["site.lmst_hours"]
    mount_is_connected:
        ftype: raw
        label: 'MountConnected'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.is_connected"]
    mount_geometry:
        ftype: raw
        label: Mode
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.geometry"]
    mount_timestamp_utc:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.timestamp_utc"]
    mount_mjd:
        ftype: raw
        label: 'MDJ'
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["mount.julian_date"]
    mount_slew_time_constant:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.slew_time_constant"]
    mount_ra_apparent_hours:
        ftype: raw
        label: RA
        units: hours
        dtype: float64
        rate: fast
        var: telescope.state["mount.ra_apparent_hours"]
    mount_dec_apparent_degs:
        ftype: raw
        label: DEC
        units: degs
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.dec_apparent_degs"]'
    mount_ra_j2000_hours:
        ftype: raw
        label: RAJ2000
        units: 'hours'
        dtype: float64
        rate: fast
        var: telescope.state["mount.ra_j2000_hours"]
    mount_dec_j2000_deg:
        ftype: raw
        label: DECJ2000
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.dec_j2000_deg"]
    mount_target_ra_apparent_hours:
        ftype: raw
        label: RA
        units: 'hours'
        dtype: float64
        rate: fast
        var: telescope.state["mount.target_ra_apparent_hours"]
    mount_target_dec_apparent_deg:
        ftype: raw
        label: DEC
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.target_dec_apparent_deg"]
    mount_az_deg:
        ftype: raw
        label: 'Az'
        units: 'deg'
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.azimuth_degs"]'
    mount_alt_deg:
        ftype: raw
        label: 'Alt'
        units: 'deg'
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.altitude_degs"]'
    mount_is_slewing:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: 'telescope.state["mount.is_slewing"]'
    mount_is_tracking:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.is_tracking"]
    mount_field_angle_here:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.field_angle_here_degs"]
    mount_angle_at_target:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.field_angle_at_target_degs"]
    mount_field_angle_rate_at_target:
        ftype: raw
        label: 'rate'
        units: 'dps'
        dtype: float64
        rate: fast
        var: telescope.state["mount.field_angle_rate_at_target_degs_per_sec"]
    mount_path_angle_at_target:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.path_angle_at_target_degs"]
    mount_path_angle_rate_at_target:
        ftype: raw
        label: 'rate'
        units: 'dps'
        dtype: float64
        rate: fast
        var: telescope.state["mount.path_angle_rate_at_target_degs_per_sec"]
    # axis0 = AZ
    mount_az_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: 'telescope.state["mount.axis0.is_enabled"]'
    mount_az_rms_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.rms_error_arcsec"]
    mount_az_dist_to_target:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: "telescope.state['mount.axis0.dist_to_target_arcsec']"
    mount_az_servo_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.servo_error_arcsec"]
    mount_az_position:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.position_degs"]
    mount_az_position_timestamp:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.position_timestamp"]
    # axis1 = alt
    mount_alt_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int
        rate: fast
        var: 'telescope.state["mount.axis1.is_enabled"]'
    mount_alt_rms_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.rms_error_arcsec"]
    mount_alt_dist_to_target:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.axis1.dist_to_target_arcsec"]'
    mount_alt_servo_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.servo_error_arcsec"]
    mount_alt_position:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.position_degs"]
    mount_alt_position_timestamp:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.position_timestamp"]
    # Telescope Sky Model Information
    mount_model_num_points_total:
        ftype: raw
        label: 'number'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.model.num_points_total"]
    mount_model_num_points_enabled:
        ftype: raw
        label: 'number'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.model.num_points_enabled"]
    mount_model_rms_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.model.rms_error_arcsec"]
    # focuser
    focuser_is_connected:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["focuser.is_connected"]
    focuser_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["focuser.is_enabled"]
    focuser_position:
        ftype: raw
        label: 'Position'
        units: 'steps'
        dtype: float64
        rate: fast
        var: telescope.state["focuser.position"]
    focuser_is_moving:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["focuser.is_moving"]
    rotator_is_connected:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_connected"]
    rotator_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_enabled"]
    rotator_mech_position:
        ftype: raw
        label: 'Position'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["rotator.mech_position_degs"]
    rotator_field_angle:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["rotator.field_angle_degs"]
    rotator_is_moving:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_moving"]
    rotator_is_slewing:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_slewing"]
    telescope_m3_port:
        ftype: raw
        label: 'Port'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["m3.port"]
    telescope_autofocus_is_running:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["autofocus.is_running"]
    telescope_autofocus_success:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["autofocus.success"]
    telescope_autofocus_best_position:
        ftype: raw
        label: 'Position'
        units: 'steps'
        dtype: float64
        rate: fast
        var: telescope.state["autofocus.best_position"]
    telescope_autofocus_tolerance:
        ftype: raw
        label: 'Position'
        units: 'steps'
        dtype: float64
        rate: fast
        var: telescope.state["autofocus.tolerance"]
#weather:
    #CDS (Clear Dark Skies)
    cds_cloud_index:
        ftype: raw
        label: 'CloudIndex'
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSCLOUD'
    cds_trans_index:
        ftype: raw
        label: TransIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTRANS'
    cds_seeing_index:
        ftype: raw
        label: SeeingIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSSEEING'
    cds_wind_index:
        ftype: raw
        label: WindIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSWINDI'
    ws_cds_max:
        ftype: raw
        label: Speed
        units: mph
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSWINDMAX'
    ws_cds_min:
        ftype: raw
        label: Speed
        units: mph
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSWINDMIN'
    cds_rh_index:
        ftype: raw
        label: RHIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHI'
    rh_cds_min:
        ftype: raw
        label: RH
        units: pct
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHMIN'
    rh_cds_max:
        ftype: raw
        label: RH
        units: pct
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHMAX'
    rh_cds_min:
        ftype: raw
        label: RH
        units: pct
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHMAX'
    cds_temp_index:
        ftype: raw
        label: TempIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTEMPI'
    T_cds_min:
        ftype: raw
        label: T
        units: C
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTEMPMIN'
    T_cds_max:
        ftype: raw
        label: T
        units: C
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTEMPMAX'
    cloud_min:
        ftype: raw
        label: 'Clouds-Min'
        units: None
        dtype: float64
        rate: slow
        var: 'weather.CLOUD_MIN'
    cloud_max:
        ftype: raw
        label: 'Clouds-Max'
        units: None
        dtype: float64
        rate: slow
        var: 'weather.CLOUD_MAX'
    # Palomar Command Server: PCS
    dome_is_connected:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["is_connected"]'
    dome_reconnect_remaining_time:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["reconnect_remaining_time"]'
    dome_reconnect_timeout:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["reconnect_timeout"]'
    dome_last_command_reply:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["last_command_reply"]'
    dome_query_time:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: 'hk'
        var: 'dome.state["query_timestamp"]'
    dome_time_utc:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: 'dome.state["UTC_timestamp"]'
    dome_telescope_power:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Telescope_Power"]'
    dome_az_deg:
        ftype: raw
        label: 'Az'
        units: 'deg'
        dtype: float64
        rate: slow
        var: 'dome.state["Dome_Azimuth"]'
    dome_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Dome_Status_Num"]'
    dome_home_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Home_Status_Num"]'
    dome_shutter_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Shutter_Status_Num"]'
    dome_control_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Control_Status_Num"]'
    dome_close_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Close_Status_Num"]'
    dome_weather_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Weather_Status_Num"]'
    dome_sunlight_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Sunlight_Status_Num"]'
    dome_wetness_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Wetness_Status_Num"]'
    
    
    # Weather info from dome
    Tdp_outside_threshold_pcs:
        ftype: raw
        label: 'DewPoint'
        units: 'C'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_Dewpoint_Threshold"]'
    windspeed_average_threshold_pcs:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: 'dome.state["Average_Wind_Speed_Threshold"]'
    T_outside_pcs:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_Temp"]'
    rh_outside_pcs:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_RH"]'
    Tdp_outside_pcs:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_Dewpoint"]'
    pressure_pcs:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: 'dome.state["Pressure"]'
    wind_direction_pcs:
        ftype: raw
        label: 'direction'
        units: 'deg'
        dtype: float64
        rate: slow
        var: 'dome.state["Wind_Direction"]'
    windspeed_average_pcs:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: 'dome.state["Average_Wind_Speed"]'
    time_remaining_hold_pcs:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: 'dome.state["Weather_Hold_time"]'
    
    # Dome Faults
    Dome_Fault_Dome_Drive_Comm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Dome_Drive_Comm"]'
    Dome_Fault_PLC_Comm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_PLC_Comm"]'
    Dome_Fault_Weather_Comm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Weather_Comm"]'
    Dome_Fault_Fire_Alarm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Fire_Alarm"]'
    Dome_Fault_Door_Open:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Door_Open"]'
    Dome_Fault_ESTOP:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_ESTOP"]'
    Dome_Fault_Over_Temp:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Over_Temp"]'
    Dome_Fault_Drive_Internal_Voltage:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Internal_Voltage"]'
    Dome_Fault_Drive_Over_Voltage:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Over_Voltage"]'
    Dome_Fault_Drive_Over_Current:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Over_Current"]'
    Dome_Fault_Drive_Motor_Open_Winding:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Motor_Open_Winding"]'
    Dome_Fault_Drive_Bad_Encoder:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Bad_Encoder"]'
        
    # Palomar telemetry server: P48
    p48_is_online:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'weather.P48_Online'
    time_utc_p48:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: weather.P48_UTC_timestamp
    ws_avg_threshold_p48:
        ftype: raw
        label: 'windspeed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: weather.P48_Windspeed_Avg_Threshold
    ws_gust_threshold_p48:
        ftype: raw
        label: 'windspeed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: weather.P48_Gust_Speed_Threshold
    time_alarm_p48:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: weather.P48_Alarm_Hold_Time
    time_remaining_hold_p48:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: weather.P48_Remaining_Hold_Time
    rh_threshold_outside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Remaining_Hold_Time
    rh_threshold_inside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_DewPt_Threshold
    wind_dir_current_p48:
        ftype: raw
        label: 'angle'
        units: 'degrees'
        dtype: float64
        rate: slow
        var: weather.P48_Wind_Dir_Current
    ws_current_p48:
        ftype: raw
        label: 'speed'
        units: 'm/s'
        dtype: float64
        rate: slow
        var: weather.P48_Windspeed_Current
    ws_avg_p48:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: weather.P48_Windspeed_Average
    T_outside_air_p48:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Outside_Air_Temp
    rh_outside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Outside_Rel_Hum
    Tdp_outside_p48:
        ftype: raw
        label: 'DewPoint'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Outside_DewPt
    T_inside_air_p48:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_Air_Temp
    rh_inside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_Rel_Hum
    Tdp_inside_p48:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_DewPt
    wetness_p48:
        ftype: raw
        label: 'wetness'
        units: None
        dtype: int64
        rate: slow
        var: weather.P48_Wetness_Num
    status_p48:
        ftype: raw
        label: 'ready'
        units: None
        dtype: int64
        rate: slow
        var: weather.P48_Weather_Status_Num
    ### ROBOTIC DECISION MAKING STUFF ###
    ok_to_observe:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: slow
        var: weather.ok_to_observe
    
    ### LABJACK STUFF###
    V_LJ0_AIN0:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN0']
    V_LJ0_AIN1:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN1']
    V_LJ0_AIN2:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN2']
    V_LJ0_AIN3:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN3']
    V_LJ0_AIN4:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN4']
    V_LJ0_AIN5:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN5']
    V_LJ0_AIN6:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN6']
    V_LJ0_AIN7:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN7']
    V_LJ0_AIN8:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN8']
    V_LJ0_AIN9:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN9']
    V_LJ0_AIN10:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN10']
    V_LJ0_AIN11:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN11']
    V_LJ0_AIN12:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN12']
    V_LJ0_AIN13:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN13']
    V_LJ0_AIN14:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN14']
    LJ0_FIO0:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO0']
    LJ0_FIO1:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO1']
    LJ0_FIO2:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO2']
    LJ0_FIO3:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO3']
    
    # CHILLER STUFF
    chiller_setpoint:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['UserSetpoint']
    chiller_setpoint_last_update_dt:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['last_poll_dt']['UserSetpoint']
    chiller_temperature:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['SystemDisplayValueStatus']
    chiller_is_running:
        ftype: raw
        label: 'Status'
        units: None
        dtype: float64
        rate: 'hk'
        var: chiller.state['UserRemoteStartStop']
        
derived_fields:
    # note the base directory for the LUT is the wsp directory
    T_LJ0:
        ftype: lincom
        input_field: 'V_LJ0_AIN14'
        slope: -92.6
        intercept: 194.45
        label: 'T'
        units: 'C'
    T_LJ0_AIN0:
        ftype: linterp
        input_field: 'V_LJ0_AIN0'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
    T_LJ0_AIN1:
        ftype: linterp
        input_field: 'V_LJ0_AIN1'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
    T_LJ0_AIN2:
        ftype: linterp
        input_field: 'V_LJ0_AIN2'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
    T_LJ0_AIN3:
        ftype: linterp
        input_field: 'V_LJ0_AIN3'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'