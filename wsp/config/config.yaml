# config file for WINTER

########## SITE PARAMETERS ##########
site:
    # lat/lon. expects a format that can be read with astropy.coordinates.Angle()
    lat: '33d21m21.6s'
    lon: '-116d51m46.8s'
    # height (site altitude). height is a number, units are something that can be parsed with astropy.units.Unit()
    height: 1706
    height_units: 'm'
    timezone: 'America/Los_Angeles'


########## SERIAL BUS DEVICES ##########
# USB-Serial Devices
usb_serial_dev:
    chiller: '/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AQ00T8I9-if00-port0'
    steppers: '/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_AG0JG9J3-if00-port0'
    
    
########## FITS IMAGE DIRECTORY ##########
image_directory: 'data/images'
#image_prefix: 'viscam_'
image_data_link_directory: 'data'
image_data_link_name: 'tonight_images.lnk'
image_last_taken_link: 'last_image.lnk'

########## FITS HEADER THINGS ##########
fits_header:
    default_observer: 'WINTER roboOperator'

########## WINTERCMD COMMANDING ##########
wintercmd_server_addr: 'localhost'
wintercmd_server_port: 7000
wintercmd_server_timeout: 0.1
# trusted hosts (whitelist). allow commands from these machines
wintercmd_trusted_hosts:
    -127.0.0.1
    -127.0.1.1
    -192.168.1.10
    -192.168.1.11
    
############# VISCAM RASPI ###########################
# add Raspberry Pi URL to communicate with the VISCAM
# shutter and filter wheel
# TODO, move this somewhere cleaner
viscam_url: 'http://192.168.1.228:5001/'

viscam_platescale_as: 0.466

########## SCHEDULING ##########
# location of the schedule files (home + this directory)
scheduleFile_directory: 'data/schedules'
#scheduleFile_nightly_prefix: 'WINTER_NightlySchedule_'
scheduleFile_nightly_prefix: 'nightly_'
scheduleFile_nightly_link_directory: 'data'
scheduleFile_nightly_link_name: 'nightly_schedule.lnk'

# ToO: Target of Opportunity Scheduling
scheduleFile_ToO_HighPriority_directory: 'data/schedules/ToO/HighPriority'
scheduleFile_ToO_LowPriority_directory: ' data/schedules/ToO/LowPriority'


# observation log
obslog_directory: 'data'
obslog_database_name: 'WINTER_ObsLog' #.db is implied


# dither table
# base directory is wsp path
dither_file: 'config/dither_list.conf'




# commanding (seconds)
cmd_timeout: 10.0
cmd_status_dt: 0.5 # time between checks to see if status is verified
cmd_satisfied_N_samples: 3 # number of samples to make sure that status is verified

########### ALERTS ##########
# base directory is wsp path
alert_handler:
    auth_config_file: 'credentials/authentication.yaml'
    user_config_file: 'credentials/alert_list.yaml'
    alert_config_file: 'config/alert_config.yaml'

########### HOUSEKEEPING ##########


# define update times (ms)
daq_dt:
    hk: 100.0
    fast: 500.0
    slow: 500.0
    very_slow: 2000.0

# this will crash if this is not greater than or equal to the max daq_dt
#write_dt: 500.0
dirfile_write_dt: 1000
dirfile_spf: 10

# where to put the data. base directory is home
housekeeping_data_directory: 'data/rawdir'
housekeeping_data_link_directory: 'data'
housekeeping_data_link_name: 'dm.lnk'

# where to put the log. base directory is home
log_directory: 'data/log'
log_link_directory: 'data'
log_link_name: 'winter.log'

########### ROBO MANAGER ###########
# read this as: send the CMD when the current value of sun_alt or time is COND than the specified value.
# eg, if type is sun and cond is >= : then send the cmd when sun_alt >= VAL
robotic_manager_triggers:
    timeformat: '%H:%M:%S.%f'
    triggers:
        daytest:
            conds:
                cond1:
                    type: 'sun'
                    val: 0
                    cond: '>'
                cond2:
                    type: 'time'
                    val: '13:00:0.0'
                    cond: '>'        
            sundir: 0
            repeat_on_restart: True
            cmd: xyzzy
                
        fans_on:
            conds:
                cond1:
                    type: 'time'
                    val: '14:00:0.0'
                    cond: '>'
            sundir: -1
            repeat_on_restart: False
            cmd: 'mount_fans_on'
        startup:
            conds:
                cond1:
                    type: 'sun'
                    val: 5.0
                    cond: '<'
            sundir: 0
            repeat_on_restart: False
            cmd: 'total_startup'
        load_schedule:
            conds:
                cond1:
                    type: 'sun'
                    val: 0.0
                    cond: '<'
            sundir: 0
            repeat_on_restart: False
            cmd: 'load_nightly_schedule'
        open_dome:
            conds:
                cond1:
                    type: 'sun'
                    val: '-4.5'
                    cond: '<'
            repeat_on_restart: False
            sundir: -1
            cmd: 'dome_open'
        evening_flats:
            conds:
                cond1:
                    type: 'sun'
                    val: -5.0
                    cond: '<'
                cond2:
                    type: 'sun'
                    val: -7.0
                    cond: '>'
            repeat_on_restart: False
            sundir: -1
            cmd: 'robo_do_calibration'
        # don't do the test image if you're not doing the focusing
        #test_image:
        #    conds:
        #        cond1:
        #            type: 'sun'
        #            val: -11.0
        #            cond: '<'
        #    repeat_on_restart: False
        #    sundir: -1
        #    cmd: 'robo_observe altaz 75 270'
        #focus:
        #    conds:
        #        cond1:
        #            type: 'sun'
        #            val: -12.0
        #            cond: '<'
        #    sundir: 0
        #    repeat_on_restart: False
        #    cmd: 'doFocusLoop --roborun'
        start_obs:
            conds:
               cond1:
                   type: 'sun'
                   val: -12.0
                   cond: '<'
            repeat_on_restart: True
            sundir: -1
            cmd: 'robo_run'
        stop_obs:
            conds:
                cond1:
                    type: 'sun'
                    val:  -18.0
                    cond: '>'
            nextmorning: True
            sundir: 1
            repeat_on_restart: False
            cmd: 'robo_stop'
        morning_flats:
            conds:
                cond1:
                    type: 'sun'
                    val: -7.0
                    cond: '>'
                cond2:
                    type: 'sun'
                    val: -5.0
                    cond: '<'  
            nextmorning: True   
            repeat_on_restart: False          
            sundir: 1
            cmd: 'robo_do_calibration'
        shutdown:
            conds:
                cond1:
                    type: 'sun'
                    val: -4
                    cond: '>'
            nextmorning: True
            repeat_on_restart: False
            sundir: 1
            cmd: 'stow_observatory'
        fans_off:
            conds:
                cond1:
                    type: 'sun'
                    val: 0
                    cond: '>'
            nextmorning: True
            repeat_on_restart: False
            sundir: 1
            cmd: 'mount_fans_off'
        kill:
            conds:
                cond1:
                    type: 'time'
                    val: '7:59:30.0'
                    cond: '>'
                cond2:
                    type: 'sun'
                    val: 40
                    cond: '<'
                cond3:
                    type: 'sun'
                    val: 5
                    cond: '>'
                cond4:
                    type: 'time'
                    val: '12:01:0.0'
                    cond: '<'
            nextmorning: True
            repeat_on_restart: False
            sundir: 1
            cmd: 'kill'

########### TELESCOPE SET UP ##########
telescope:
    host: "thor"
    port: 8220
    home_alt_degs: 45.0
    #home_az_degs: 349.0
    home_az_degs: 0
    min_alt: 15.0
    max_alt: 85.0
    rotator_field_angle_zeropoint: 155.0 
    rotator_home_degs: -25.0
    #rotator_max_degs: 140.0
    rotator_max_degs: 160.0
    #rotator_min_degs: -70.0
    rotator_min_degs: -210.0

# define telemetry servers
telemetry_server:
    addr:  '198.202.125.214'
    port: 4698
    cmd: 'WEATHER_JSON'
    endchar: '}]'
    timeout: 0.1

command_server:
    #addr: '198.202.125.142'
    addr: '10.200.98.100'
    port: 62000
    cmd: 'status?'
    endchar: '}'
    timeout: 0.25
    
telescope_shutter:
    addr: '192.168.1.12'
    port: 9897
    cmd: "shutterstate"
    endchar: '\n'
    timeout: 0.25
    Status_Dict:
        0 : "OPEN"
        1 : "CLOSED"
        2 : "OPENING"
        3 : "CLOSING"
        4 : "ERROR"
        5 : "PARTLY_OPEN"
    

# dictionaries to interpret the status from the weather servers
# *NOTE*: it's best to use keys in quoatations to avoid the yaml loader converting them
#   for example, yaml loads key = YES as a boolean True value, but "YES" as a string
#P48_Status_Dict:
#    P48_Wetness:
#            'YES': 1
#            'NO': 0
#        P48_Weather_Status:
#            'READY': 1
#            'UNKNOWN': 0

########### DOME SET UP ##########
# dome tracking error allowed in degrees
dome_tracking_error_threshold: 0.1

dome_home_az_degs: 169

Dome_Status_Dict:
    ## Palomar Command Server
    Dome_Status:
        'OFF': 0
        'STOPPED': 1
        'STOWED': 2
        'GO_TO': 3
        'UNKNOWN': -1
        'FAULT': -2
        'HOMING' : 4
    Home_Status:
        'READY': 1
        'NOT_READY' : 0
    
    Shutter_Status:
        'OPEN': 1
        'OPENING': 5
        'CLOSED': -1
        'CLOSING': -5
        'STOPPED': 0
        'FAULT': -10

    Control_Status:
        'AVAILABLE': 0
        'REMOTE': 1
        'CONSOLE': 2
        'MANUAL': 3

    Close_Status:
        'READY': 1
        'NOT_READY': 0

    Weather_Status:
        'READY': 1
        'NOT_READY': 0
        
    Sunlight_Status:
        'READY': 1
        'NOT_READY': 0
        
    Wetness_Status:
        'READY': 1
        'NOT_READY': 0
        
    Faults:
        0x1:
            msg: 'Dome Drive Communication Lost'
            field : 'Fault_Dome_Drive_Comm'
        0x2: 
            msg: 'PLC Communication Lost'
            field: 'Fault_PLC_Comm'
        0x4: 
            msg: 'Weather Communication Lost'
            field: 'Fault_Weather_Comm'
        0x8: 
            msg: 'Fire Alarm'
            field: 'Fault_Fire_Alarm'
        0x10: 
            msg: 'Door Open'
            field: 'Fault_Door_Open'
        0x20: 
            msg: 'ESTOP'
            field: 'Fault_ESTOP'
        0x40: 
            msg: 'Drive Over Temp'
            field: 'Fault_Over_Temp'
        0x80:
            msg: 'Drive Internal Voltage'
            field: 'Fault_Drive_Internal_Voltage'
        0x100: 
            msg: 'Drive Over Voltage'
            field: 'Fault_Drive_Over_Voltage'
        0x200: 
            msg: 'Drive Over Current'
            field: 'Fault_Drive_Over_Current'
        0x400: 
            msg: 'Drive Motor Open Winding'
            field: 'Fault_Drive_Motor_Open_Winding'
        0x800: 
            msg: 'Drive Bad Encoder'
            field: 'Fault_Drive_Bad_Encoder'

########### WEATHER SET UP ##########

# weather limits
weather_limits:
    TEMP_OUT:
        MIN: -20
        MAX: 50
    TEMP_IN:
        MIN: -20
        MAX: 50
    RH_OUT:
        MIN: -100
        MAX: 100
    RH_IN:
        MIN: -100
        MAX: 100
    WIND_GUST:
        MIN: 0
        MAX: 35
    WIND_SPEED:
        MIN: 0
        MAX: 30
    DEWPOINT_IN:
        MIN: -100
        MAX: 100
    DEWPOINT_OUT:
        MIN: -100
        MAX: 100
    # these are from clear dark skies:
    TRANSPARENCY:
        MIN: 3 # average
        MAX: 5 # transparent
    SEEING:
        MIN: 3 # average
        MAX: 5 # excellent
    CLOUDS:
        MIN: 7 # 30pct covered
        MAX: 10 # CLEAR

########### EPHEMERIS SET UP ##########
ephem:
    # note that changing these will not update the housekeeping fields, that must be done manually
    min_target_separation:
        moon: 45.0
        mercury: 5
        venus: 5
        mars: 5
        jupiter: 5
        saturn: 5


        
########### FOCUSER LOOP PARAM ###########
focus_loop_param:
    sweep_param:
        narrow:
            total_throw: 400
            nsteps: 5
        wide:
            total_throw: 800
            nsteps: 12
    #micron_interval: 100
    targets:
        targ1:
            target_type: altaz
            target: '55 287'
        targ2:
            target_type: altaz
            target: '85 270'
    target_type: altaz
    target: '85 200'
    focus_error_max: 50
    focus_log_path: 'data/focusing/focus_log.json'
    focus_graceperiod_hours: 12
    max_focus_attempts: 2
    #fine_micron_interval: 10
    #recent_path: '/home/winter/data/last_image.lnk'
    #file_type: '\*fits'
    pixscale: 0.466
    #current_filter: 'rband'
    #save_dir: '/home/winter/data/images/focusing/'
    image_log_path: '/home/winter/data/plots_focuser/img_logs/'
    # nate added these below:
    results_log_parent_dir: 'data/focusing'
    results_log_dir: 'results'
    results_log_last_link: 'last_focus_results.lnk'
    results_plot_last_link: 'last_focus_plot.lnk'

filt_limits:
    uband:
        upper: 10300
        lower: 10000
    other2:
        upper: 11600
        lower: 8500
    rband:
        upper: 11150 
        lower: 9000
    other4:
        upper: 11150
        lower: 9000
    other5:
        upper: 10600
        lower: 9800
    other6:
        upper: 11150
        lower: 9800

filters:
    summer:
        r:
            name: "SDSS r' (Chroma)"
            nominal_focus: 9960
            active: True
            focus_exptime: 10
        u:
            name: "SDSS u' (Chroma)"
            nominal_focus: 9961
            active: False
            focus_exptime: 30
            
        other2:
            name: "Unknown filter posn 2"
            nominal_focus: 10150
            active: False
            focus_exptime: 10
        other4:
            name: "Unknown filter posn 4"
            nominal_focus: 10150
            active: False
            focus_exptime: 10
        other5:
            name: "SDSS r' (Chroma, filter error)"
            nominal_focus: 10150
            active: False
            focus_exptime: 10
        other6:
            name: "Unknown filter posn 6"
            nominal_focus: 10150
            active: False
            focus_exptime: 10
    winter:
        J:
            name: "MKO J-band (Asahi)"
            nominal_focus: 10000
            active: False
            focus_exptime: 30
        Y:  
            name: "MKO Y-band (Asahi)"
            nominal_focus: 10000
            active: False
            focus_exptime: 30
        Hs: 
            name: "MKO Hs-band (Asahi)"
            nominal_focus: 10000
            active: False
            focus_exptime: 30
        

filter_wheels:
    summer:
        positions:
            1: 'u'
            2: 'other2'
            3: 'r'
            4: 'other4'
            5: 'other5'
            6: 'other6'
    winter:
        positions:
            1: 'Y'
            2: 'J'
            3: 'Hs'
            4: 'dark'

########### POINTING MODEL PARAMETERS ###########
# Construct a grid of 3 x 6 = 18 Alt-Az points
# ranging from 20 to 80 degrees Altitude, and from
# 5 to 355 degrees Azimuth.
#points = create_point_list(3, 20, 80, 6, 5, 355)
pointing_model:
    grid_points:
        num_alt: 3
        min_alt: 20
        max_alt: 80
        num_az: 6
        min_az: 5
        max_az: 355
    # current default pointing model to use
    pointing_model_file: 'pointing_model_20220311.pxp'
    # filepath of pointlist to use by default in home directory
    #default_pointlist: 'data/pointing_model/25_point_denser_near_zenith_spaced_pointing_model_points.txt'
    default_pointlist: 'data/pointing_model/200_point_denser_near_zenith_spaced_pointing_model_points.txt'
    # path prefix is HOME
    ps3cli_path: ps3cli
    catalog_path: Kepler
    
    
###############################################################################    
##################### ONLY HOUSEKEEPING DATA BELOW THIS!! #####################     
###############################################################################

########### HOUSEKEEPING STATE + DIRFILE SET UP ##########


# default value for housekeeping fields
default_value: -999

### Labjack Definitions ###
labjacks:
    lj0:
        config: 'labjack0_config.yaml'

# define fields.
# Note: each rate must have a corresponding "daq_rate" as given above
fields:
#general:

    count:
        ftype: raw
        label: 'count'
        units: None
        dtype: int64
        rate: slow
        var: 'index'
    timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'timestamp'
    testcount:
        ftype: raw
        label: 'count'
        units: None
        dtype: float64
        rate: 'hk'
        var: 'counter.state["count"]'
#power statues
    pdu1_1:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[0]'
    pdu1_2:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[1]'
    pdu1_3:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[2]'
    pdu1_4:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[3]'
    pdu1_5:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[4]'
    pdu1_6:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[5]'
    pdu1_7:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[6]'
    pdu1_8:
        ftype: raw
        label: 'State'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'pdu1.status[7]'
# site
    site_latitude_degs:
        ftype: raw
        label: Latitude
        units: deg
        dtype: float64
        rate: fast
        var: ephem.lat_deg
    site_longitude_degs:
        ftype: raw
        label: Longitude
        units: deg
        dtype: float64
        rate: fast
        var: ephem.lon_deg
    site_height_meters:
        ftype: raw
        label: Height
        units: m
        dtype: float64
        rate: fast
        var: ephem.height_m
        
#ephemeris
    ephem_timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'ephem.state["timestamp"]'
    ephem_mjd:
        ftype: raw
        label: 'MJD'
        units: None
        dtype: float64
        rate: slow
        var: "ephem.state['mjd']"
    sun_alt:
        ftype: raw
        label: 'Alt'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['sunalt']"
    sun_rising:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: hk
        var: "ephem.state['sun_rising']"
    moon_alt:
        ftype: raw
        label: 'Alt'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['moonalt']"
    moon_az:
        ftype: raw
        label: 'Az'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['moonaz']"
    ephem_dist_moon:
        ftype: raw
        label: 'Dist'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['ephem_dist_moon']"
    ephem_dist_mercury:
        ftype: raw
        label: 'Dist'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['ephem_dist_mercury']"
    ephem_dist_venus:
        ftype: raw
        label: 'Dist'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['ephem_dist_venus']"
    ephem_dist_mars:
        ftype: raw
        label: 'Dist'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['ephem_dist_mars']"
    ephem_dist_jupiter:
        ftype: raw
        label: 'Dist'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['ephem_dist_jupiter']"
    ephem_dist_saturn:
        ftype: raw
        label: 'Dist'
        units: deg
        dtype: float64
        rate: slow
        var: "ephem.state['ephem_dist_saturn']"
    ephem_in_view:
        ftype: raw
        label: 'State'
        units: deg
        dtype: int64
        rate: slow
        var: "ephem.state['ephem_in_view']"
    ephem_telemetry_connected:
        ftype: raw
        label: 'State'
        units: deg
        dtype: int64
        rate: slow
        var: "ephem.state['telemetry_connected']"
    
    
#schedule
    az_scheduled:
        ftype: raw
        label: 'Az'
        units: deg
        dtype: float64
        rate: slow
        var: "schedule.currentObs['azimuth']"
    alt_scheduled:
        ftype: raw
        label: 'Alt'
        units: deg
        dtype: float64
        rate: slow
        var: "schedule.currentObs['azimuth']"
    remaining_schedule_targets:
        ftype: raw
        label: 'Num'
        units: None
        dtype: int64
        rate: hk
        var: "schedule.remaining_valid_observations"
    
#telescope
    pwi4_version_field0:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[0]"]
    pwi4_version_field1:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[1]"]
    pwi4_version_field2:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[2]"]
    pwi4_version_field3:
        ftype: raw
        label: Version
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["pwi4.version_field[3]"]
    telescope_timestamp_utc:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["response.timestamp_utc"]
    mount_latitude_degs:
        ftype: raw
        label: Latitude
        units: deg
        dtype: float64
        rate: fast
        var: telescope.state["site.latitude_degs"]
    mount_longitude_degs:
        ftype: raw
        label: Longitude
        units: deg
        dtype: float64
        rate: fast
        var: telescope.state["site.longitude_degs"]
    mount_height_meters:
        ftype: raw
        label: Height
        units: m
        dtype: float64
        rate: fast
        var: telescope.state["site.height_meters"]
    mount_lmst_hours:
        ftype: raw
        label: LMST
        units: hours
        dtype: float64
        rate: fast
        var: telescope.state["site.lmst_hours"]
    mount_is_connected:
        ftype: raw
        label: 'MountConnected'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.is_connected"]
    mount_geometry:
        ftype: raw
        label: Mode
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.geometry"]
    mount_timestamp_utc:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.timestamp_utc"]
    mount_jd:
        ftype: raw
        label: 'JD'
        units: None
        dtype: float64
        rate: fast
        var: telescope.state["mount.julian_date"]
    mount_slew_time_constant:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.slew_time_constant"]
    mount_ra_apparent_hours:
        ftype: raw
        label: RA
        units: hours
        dtype: float64
        rate: fast
        var: telescope.state["mount.ra_apparent_hours"]
    mount_dec_apparent_degs:
        ftype: raw
        label: DEC
        units: degs
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.dec_apparent_degs"]'
    mount_ra_j2000_hours:
        ftype: raw
        label: RAJ2000
        units: 'hours'
        dtype: float64
        rate: fast
        var: telescope.state["mount.ra_j2000_hours"]
    mount_dec_j2000_deg:
        ftype: raw
        label: DECJ2000
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.dec_j2000_degs"]
    mount_target_ra_apparent_hours:
        ftype: raw
        label: RA
        units: 'hours'
        dtype: float64
        rate: fast
        var: telescope.state["mount.target_ra_apparent_hours"]
    mount_target_dec_apparent_deg:
        ftype: raw
        label: DEC
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.target_dec_apparent_degs"]
    mount_az_deg:
        ftype: raw
        label: 'Az'
        units: 'deg'
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.azimuth_degs"]'
    mount_alt_deg:
        ftype: raw
        label: 'Alt'
        units: 'deg'
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.altitude_degs"]'
    mount_is_slewing:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: 'telescope.state["mount.is_slewing"]'
    mount_is_tracking:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.is_tracking"]
    mount_field_angle_here:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.field_angle_here_degs"]
    mount_angle_at_target:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.field_angle_at_target_degs"]
    mount_field_angle_rate_at_target:
        ftype: raw
        label: 'rate'
        units: 'dps'
        dtype: float64
        rate: fast
        var: telescope.state["mount.field_angle_rate_at_target_degs_per_sec"]
    mount_path_angle_at_target:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.path_angle_at_target_degs"]
    mount_path_angle_rate_at_target:
        ftype: raw
        label: 'rate'
        units: 'dps'
        dtype: float64
        rate: fast
        var: telescope.state["mount.path_angle_rate_at_target_degs_per_sec"]
    mount_offsets_ra_arcsec_total:
        ftype: raw
        label: 'RA'
        units: 'arcsec'
        dtype: float64
        rate: hk
        var: telescope.state["mount.ra_arcsec.total"]
    mount_offsets_ra_arcsec_rate:
        ftype: raw
        label: 'RA'
        units: 'arcsecps'
        dtype: float64
        rate: hk
        var: telescope.state["mount.ra_arcsec.rate"]
    mount_offsets_dec_arcsec_total:
        ftype: raw
        label: 'Dec'
        units: 'arcsec'
        dtype: float64
        rate: hk
        var: telescope.state["mount.dec_arcsec.total"]
    mount_offsets_dec_arcsec_rate:
        ftype: raw
        label: 'RA'
        units: 'arcsecps'
        dtype: float64
        rate: hk
        var: telescope.state["mount.dec_arcsec.rate"]
    
    # axis0 = AZ
    mount_az_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: 'telescope.state["mount.axis0.is_enabled"]'
    mount_az_rms_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.rms_error_arcsec"]
    mount_az_dist_to_target:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: "telescope.state['mount.axis0.dist_to_target_arcsec']"
    mount_az_servo_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.servo_error_arcsec"]
    mount_az_position:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.position_degs"]
    mount_az_position_timestamp:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis0.position_timestamp"]
    # axis1 = alt
    mount_alt_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: 'telescope.state["mount.axis1.is_enabled"]'
    mount_alt_rms_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.rms_error_arcsec"]
    mount_alt_dist_to_target:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: 'telescope.state["mount.axis1.dist_to_target_arcsec"]'
    mount_alt_servo_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.servo_error_arcsec"]
    mount_alt_position:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.position_degs"]
    mount_alt_position_timestamp:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: fast
        var: telescope.state["mount.axis1.position_timestamp"]
    # Telescope Sky Model Information
    mount_model_num_points_total:
        ftype: raw
        label: 'number'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.model.num_points_total"]
    mount_model_num_points_enabled:
        ftype: raw
        label: 'number'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["mount.model.num_points_enabled"]
    mount_model_rms_error:
        ftype: raw
        label: 'Angle'
        units: 'arcsec'
        dtype: float64
        rate: fast
        var: telescope.state["mount.model.rms_error_arcsec"]
    # mirror cover
    Mirror_Cover_State:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'mirror_cover.state["mirror_cover_state"]'
    Mirror_Cover_State_timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'mirror_cover.state["mirror_cover_state_last_timestamp"]'
    Mirror_Cover_Connected:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'mirror_cover.state["mirror_cover_connected"]'
    Mirror_Cover_Connected_timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'mirror_cover.state["mirror_cover_connected_last_timestamp"]'

    # focuser
    focuser_is_connected:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["focuser.is_connected"]
    focuser_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["focuser.is_enabled"]
    focuser_position:
        ftype: raw
        label: 'Position'
        units: 'steps'
        dtype: float64
        rate: fast
        var: telescope.state["focuser.position"]
    focuser_is_moving:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["focuser.is_moving"]
    rotator_is_connected:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_connected"]
    rotator_is_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_enabled"]
    rotator_wrap_check_enabled:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator_wrap_check_enabled"]
    rotator_wrap_status:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["wrap_status"]
    rotator_mech_position:
        ftype: raw
        label: 'Position'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["rotator.mech_position_degs"]
    rotator_field_angle:
        ftype: raw
        label: 'Angle'
        units: 'deg'
        dtype: float64
        rate: fast
        var: telescope.state["rotator.field_angle_degs"]
    rotator_is_moving:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_moving"]
    rotator_is_slewing:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["rotator.is_slewing"]
    telescope_m3_port:
        ftype: raw
        label: 'Port'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["m3.port"]
    telescope_autofocus_is_running:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["autofocus.is_running"]
    telescope_autofocus_success:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: fast
        var: telescope.state["autofocus.success"]
    telescope_autofocus_best_position:
        ftype: raw
        label: 'Position'
        units: 'steps'
        dtype: float64
        rate: fast
        var: telescope.state["autofocus.best_position"]
    telescope_autofocus_tolerance:
        ftype: raw
        label: 'Position'
        units: 'steps'
        dtype: float64
        rate: fast
        var: telescope.state["autofocus.tolerance"]
    # telescope temperatures
    telescope_temp_m1:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: fast
        var: telescope.state["temperature.primary"]
    telescope_temp_m2:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: fast
        var: telescope.state["temperature.secondary"]
    telescope_temp_m3:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: fast
        var: telescope.state["temperature.m3"]
    telescope_temp_ambient:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: fast
        var: telescope.state["temperature.ambient"]
#weather:
    #CDS (Clear Dark Skies)
    cds_cloud_index:
        ftype: raw
        label: 'CloudIndex'
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSCLOUD'
    cds_trans_index:
        ftype: raw
        label: TransIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTRANS'
    cds_seeing_index:
        ftype: raw
        label: SeeingIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSSEEING'
    cds_wind_index:
        ftype: raw
        label: WindIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSWINDI'
    ws_cds_max:
        ftype: raw
        label: Speed
        units: mph
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSWINDMAX'
    ws_cds_min:
        ftype: raw
        label: Speed
        units: mph
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSWINDMIN'
    cds_rh_index:
        ftype: raw
        label: RHIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHI'
    rh_cds_min:
        ftype: raw
        label: RH
        units: pct
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHMIN'
    rh_cds_max:
        ftype: raw
        label: RH
        units: pct
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHMAX'
    rh_cds_min:
        ftype: raw
        label: RH
        units: pct
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSRHMAX'
    cds_temp_index:
        ftype: raw
        label: TempIndex
        units: None
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTEMPI'
    T_cds_min:
        ftype: raw
        label: T
        units: C
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTEMPMIN'
    T_cds_max:
        ftype: raw
        label: T
        units: C
        dtype: float64
        rate: slow
        sys: weather
        var: 'weather.CDSTEMPMAX'
    cloud_min:
        ftype: raw
        label: 'Clouds-Min'
        units: None
        dtype: float64
        rate: slow
        var: 'weather.CLOUD_MIN'
    cloud_max:
        ftype: raw
        label: 'Clouds-Max'
        units: None
        dtype: float64
        rate: slow
        var: 'weather.CLOUD_MAX'
    # Palomar Command Server: PCS
    dome_is_connected:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["is_connected"]'
    dome_reconnect_remaining_time:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["reconnect_remaining_time"]'
    dome_reconnect_timeout:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["reconnect_timeout"]'
    dome_last_command_reply:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["last_command_reply"]'
    dome_query_time:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: 'hk'
        var: 'dome.state["query_timestamp"]'
    dome_timestamp:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: 'dome.state["timestamp"]'
    dome_telescope_power:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Telescope_Power"]'
    dome_az_deg:
        ftype: raw
        label: 'Az'
        units: 'deg'
        dtype: float64
        rate: slow
        var: 'dome.state["Dome_Azimuth"]'
    dome_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Dome_Status_Num"]'
    dome_home_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Home_Status_Num"]'
    dome_shutter_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Shutter_Status_Num"]'
    dome_control_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Control_Status_Num"]'
    dome_close_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Close_Status_Num"]'
    dome_weather_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Weather_Status_Num"]'
    dome_sunlight_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Sunlight_Status_Num"]'
    dome_wetness_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Wetness_Status_Num"]'
    # things from dome_local
    dome_tracking_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: 'hk'
        var: 'dome.state["tracking"]'
    dome_az_goal:
        ftype: raw
        label: 'Az'
        units: 'deg'
        dtype: float64
        rate: slow
        var: 'dome.state["az_goal"]'
    dome_az_error:
        ftype: raw
        label: 'Az'
        units: 'deg'
        dtype: float64
        rate: slow
        var: 'dome.state["az_error"]'
    
    # Weather info from dome
    Tdp_outside_threshold_pcs:
        ftype: raw
        label: 'DewPoint'
        units: 'C'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_Dewpoint_Threshold"]'
    windspeed_average_threshold_pcs:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: 'dome.state["Average_Wind_Speed_Threshold"]'
    T_outside_pcs:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_Temp"]'
    rh_outside_pcs:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_RH"]'
    Tdp_outside_pcs:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: 'dome.state["Outside_Dewpoint"]'
    pressure_pcs:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: 'dome.state["Pressure"]'
    wind_direction_pcs:
        ftype: raw
        label: 'direction'
        units: 'deg'
        dtype: float64
        rate: slow
        var: 'dome.state["Wind_Direction"]'
    windspeed_average_pcs:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: 'dome.state["Average_Wind_Speed"]'
    time_remaining_hold_pcs:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: 'dome.state["Weather_Hold_time"]'
    
    # Dome Faults
    Dome_Fault_Dome_Drive_Comm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Dome_Drive_Comm"]'
    Dome_Fault_PLC_Comm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_PLC_Comm"]'
    Dome_Fault_Weather_Comm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Weather_Comm"]'
    Dome_Fault_Fire_Alarm:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Fire_Alarm"]'
    Dome_Fault_Door_Open:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Door_Open"]'
    Dome_Fault_ESTOP:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_ESTOP"]'
    Dome_Fault_Over_Temp:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Over_Temp"]'
    Dome_Fault_Drive_Internal_Voltage:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Internal_Voltage"]'
    Dome_Fault_Drive_Over_Voltage:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Over_Voltage"]'
    Dome_Fault_Drive_Over_Current:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Over_Current"]'
    Dome_Fault_Drive_Motor_Open_Winding:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Motor_Open_Winding"]'
    Dome_Fault_Drive_Bad_Encoder:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'dome.state["Fault_Drive_Bad_Encoder"]'
        
    # Palomar telemetry server: P48
    p48_is_online:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'weather.P48_Online'
    time_utc_p48:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: weather.P48_UTC_timestamp
    ws_avg_threshold_p48:
        ftype: raw
        label: 'windspeed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: weather.P48_Windspeed_Avg_Threshold
    ws_gust_threshold_p48:
        ftype: raw
        label: 'windspeed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: weather.P48_Gust_Speed_Threshold
    time_alarm_p48:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: weather.P48_Alarm_Hold_Time
    time_remaining_hold_p48:
        ftype: raw
        label: 'time'
        units: 's'
        dtype: float64
        rate: slow
        var: weather.P48_Remaining_Hold_Time
    rh_threshold_outside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Remaining_Hold_Time
    rh_threshold_inside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_DewPt_Threshold
    wind_dir_current_p48:
        ftype: raw
        label: 'angle'
        units: 'degrees'
        dtype: float64
        rate: slow
        var: weather.P48_Wind_Dir_Current
    ws_current_p48:
        ftype: raw
        label: 'speed'
        units: 'm/s'
        dtype: float64
        rate: slow
        var: weather.P48_Windspeed_Current
    ws_avg_p48:
        ftype: raw
        label: 'speed'
        units: 'mps'
        dtype: float64
        rate: slow
        var: weather.P48_Windspeed_Average
    T_outside_air_p48:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Outside_Air_Temp
    rh_outside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Outside_Rel_Hum
    Tdp_outside_p48:
        ftype: raw
        label: 'DewPoint'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Outside_DewPt
    T_inside_air_p48:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_Air_Temp
    rh_inside_p48:
        ftype: raw
        label: 'RH'
        units: 'pct'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_Rel_Hum
    Tdp_inside_p48:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: weather.P48_Inside_DewPt
    wetness_p48:
        ftype: raw
        label: 'wetness'
        units: None
        dtype: int64
        rate: slow
        var: weather.P48_Wetness_Num
    status_p48:
        ftype: raw
        label: 'ready'
        units: None
        dtype: int64
        rate: slow
        var: weather.P48_Weather_Status_Num
    ### ROBOTIC DECISION MAKING STUFF ###
    ok_to_observe:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: slow
        var: 'robostate["ok_to_observe"]'
    robo_target_alt:
        ftype: raw
        label: 'Alt'
        units: 'Deg'
        dtype: float64
        rate: slow
        var: robostate["target_alt"]
    robo_target_az:
        ftype: raw
        label: 'Az'
        units: 'Deg'
        dtype: float64
        rate: slow
        var: robostate["target_az"]
    robo_target_ra_j2000:
        ftype: raw
        label: 'RA'
        units: 'Hours'
        dtype: float64
        rate: slow
        var: robostate["target_ra_j2000_hours"]
    robo_target_dec_j2000:
        ftype: raw
        label: 'DEC'
        units: 'Deg'
        dtype: float64
        rate: slow
        var: robostate["target_dec_j2000_deg"]
    robo_obsHistID:
        ftype: raw
        label: 'ID'
        units: None
        dtype: float64
        rate: slow
        var: robostate["lastSeen"]
    robo_observatory_ready:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: hk
        var: robostate["observatory_ready"]    
    robo_observatory_stowed:
        ftype: raw
        label: 'Status'
        units: None
        dtype: int64
        rate: hk
        var: robostate["observatory_stowed"]  
    robo_programPriority:
        ftype: raw
        label: 'Value'
        units: None
        dtype: float64
        rate: hk
        var: robostate["programPriority"]
    robo_targetPriority:
        ftype: raw
        label: 'Value'
        units: None
        dtype: float64
        rate: hk
        var: robostate["targetPriority"]
    ### LABJACK STUFF###
    V_LJ0_AIN0:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN0']
    V_LJ0_AIN1:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN1']
    V_LJ0_AIN2:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN2']
    V_LJ0_AIN3:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN3']
    V_LJ0_AIN4:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN4']
    V_LJ0_AIN5:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN5']
    V_LJ0_AIN6:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN6']
    V_LJ0_AIN7:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN7']
    V_LJ0_AIN8:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN8']
    V_LJ0_AIN9:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN9']
    V_LJ0_AIN10:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN10']
    V_LJ0_AIN11:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN11']
    V_LJ0_AIN12:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN12']
    V_LJ0_AIN13:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN13']
    V_LJ0_AIN14:
        ftype: raw
        label: 'Voltage'
        units: 'V'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['AIN14']
    LJ0_FIO0:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO0']
    LJ0_FIO1:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO1']
    LJ0_FIO2:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO2']
    LJ0_FIO3:
        ftype: raw
        label: 'State'
        units: '-'
        dtype: float64
        rate: slow
        var: labjacks.labjacks['lj0'].state['FIO3']
    
    # Viscam housekeeping

    ccd_tec_temp:
        ftype: raw
        label: 'status'
        units: None
        dtype: float64
        rate: slow
        var: 'ccd.state["tec_temp"]'
    ccd_tec_setpoint:
        ftype: raw
        label: 'status'
        units: None
        dtype: float64
        rate: slow
        var: 'ccd.state["tec_setpoint"]'
    ccd_pcb_temp:
        ftype: raw
        label: 'status'
        units: None
        dtype: float64
        rate: slow
        var: 'ccd.state["pcb_temp"]'
    ccd_tec_status:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'ccd.state["tec_status"]'
    ccd_image_saved_flag:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'ccd.state["imageSavedFlag"]'
    ccd_exptime:
        ftype: raw
        label: 'status'
        units: None
        dtype: float64
        rate: slow
        var: 'ccd.state["exptime"]'
    ccd_last_update_timestamp:
        ftype: raw
        label: 'status'
        units: None
        dtype: float64
        rate: slow
        var: 'ccd.state["last_update_timestamp"]'
    ccd_exposureTimeout:
        ftype: raw
        label: 'Time'
        units: 's'
        dtype: float64
        rate: hk
        var: 'ccd.state["exposureTimeout"]'
    ccd_doing_exposure:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: hk
        var: 'ccd.state["doing_exposure"]'
    
    Pi_State:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'viscam.state["pi_status"]'
    Pi_timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'viscam.state["pi_status_last_timestamp"]'
    Viscam_Shutter_State:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'viscam.state["shutter_state"]'
    Viscam_Shutter_State_timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'viscam.state["shutter_state_last_timestamp"]'
    Viscam_Filter_Wheel_Position:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: 'viscam.state["filter_wheel_position"]'
    Viscam_Filter_Wheel_timestamp:
        ftype: raw
        label: 'time'
        units: ctime
        dtype: float64
        rate: slow
        var: 'viscam.state["filter_wheel_position_last_timestamp"]'

    # CHILLER STUFF
    chiller_setpoint:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['UserSetpoint']
    chiller_setpoint_last_update_dt:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['last_poll_dt']['UserSetpoint']
    chiller_temperature:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['SystemDisplayValueStatus']
    chiller_is_running:
        ftype: raw
        label: 'Status'
        units: None
        dtype: float64
        rate: 'hk'
        var: chiller.state['UserRemoteStartStop']
    small_chiller_temperature:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: 'hk'
        var: chiller.state['readSupplyT']
    small_chiller_ControlStatusMode:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: chiller.state['ControlStatusMode']
    small_chiller_isRunning:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: chiller.state['PumpStatusFlag']    
    small_chiller_AlarmStatusFlag:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: chiller.state['AlarmStatusFlag']       
    small_chiller_WarningStatusFlag:
        ftype: raw
        label: 'status'
        units: None
        dtype: int64
        rate: slow
        var: chiller.state['WarningStatusFlag']        
    small_chiller_setpoint:
        ftype: raw
        label: 'T'
        units: 'C'
        dtype: float64
        rate: slow
        var: chiller.state['readSetT'] 

#### FITS HEADER STUFF. THESE ARE STRINGS! WILL NOT BE LOGGED TO THE DIRFILE
header_fields:
    operator_name:
        var: robostate["operator"]
    obstype:
        var: robostate["obstype"]
    programPI:
        var: robostate["programPI"]
    programID:
        var: robostate["programID"]
    programName:
        var: robostate["programName"]
    qcomment:
        var: robostate["qcomment"]
    targtype:
        var: robostate["targtype"]
    pwi4_version:
        var: telescope.state["pwi4.version"]
    mount_model_filename:
        var: telescope.state["mount.model.filename"]
    
    

derived_fields:
    # note the base directory for the LUT is the wsp directory
    T_LJ0:
        ftype: lincom
        input_field: 'V_LJ0_AIN14'
        slope: -92.6
        intercept: 194.45
        label: 'T'
        units: 'C'
    T_LJ0_AIN0:
        ftype: linterp
        input_field: 'V_LJ0_AIN0'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
    T_LJ0_AIN1:
        ftype: linterp
        input_field: 'V_LJ0_AIN1'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
    T_LJ0_AIN2:
        ftype: linterp
        input_field: 'V_LJ0_AIN2'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
    T_LJ0_AIN3:
        ftype: linterp
        input_field: 'V_LJ0_AIN3'
        LUT_file: 'config/Thermistor_10k_2p5v_beta3984_V_to_T.LUT'
        label: 'T'
        units: 'C'
        

