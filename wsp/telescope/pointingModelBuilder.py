#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jul 26 15:28:03 2021

skymodelBuilder.py

This file is part of wsp

# PURPOSE #
This module defines a skymodel builder object which has some useful functions for
creating a grid of points to use for creating a sky model using PWI4.

The idea is that an instance of this will be init'd by roboOperator which will
then do observations of the points from the lists generated by this object,
and then roboOperator will handle passing the data from this model object to 
the PWI4 interface using the telescope commands.

This approach and many of these functions are adapted from Kevin Ivarsen
(Planewave) example: pwi4_build_model.py


@author: nlourie
"""


# system packages
import sys
import os
import numpy as np

# add the wsp directory to the PATH
wsp_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(1, wsp_path)
print(f'control: wsp_path = {wsp_path}')

from telescope import platesolver
from utils import utils

class PointingModelBuilder(object):
    '''
    An object to hold the functions needed to set up and execute the creation
    of a new sky model.
    
    Relies on Planewave's PWI4 interface, and uses Planewave's platesolve
    tools for astrometry
    '''
    
    def __init__(self):
        
        # set up the platesolver object
        self.plateSolver = platesolver.PlateSolver()
        
        # init a list to hold the alt/az points 
        self.altaz_points = []
        
        pass
    
    def create_grid_point_list(self, num_alt, min_alt, max_alt, num_azm, min_azm, max_azm):
        """
        Author: Kevin Ivarsen @ Planewave.
        Source: pwi4_build_model.py
        Build a grid of target points in alt-az coordinate space.
        """
    
        points = []
    
        for i in range(num_azm):
            azm = min_azm + (max_azm - min_azm) * i / float(num_azm)
    
            for j in range(num_alt):
                alt = min_alt + (max_alt - min_alt) * j / float(num_alt-1)
    
                points.append((alt, azm))
    
        #return points
        self.altaz_points = points
    
    def load_point_list(self, filepath):
        
        # load in the points into numpy arrays
        model_alt_nparr, model_az_nparr = np.loadtxt(filepath, unpack = True, delimiter = ',', comments = '#')
        
        # now build a pointlist like we do in create_point_list, eg a list of (alt, az) tuples
        
        points = []
        for i in range(len(model_alt_nparr)):
            points.append((model_alt_nparr[i], model_az_nparr[i]))
        
        self.altaz_points = points
        
        pass


if __name__ == '__main__':
    
    # load the config
    config_file = wsp_path + '/config/config.yaml'
    config = utils.loadconfig(config_file)
    
    # set up model builder
    pointingModelBuilder = PointingModelBuilder()
    
    grid_params = config['pointing_model']['grid_points']
    # create the point list
    pointingModelBuilder.create_grid_point_list(num_alt = grid_params['num_alt'], 
                                      min_alt = grid_params['min_alt'], 
                                      max_alt = grid_params['max_alt'],
                                      num_azm = grid_params['num_az'],
                                      min_azm = grid_params['min_az'],
                                      max_azm = grid_params['max_az'])
    """
    pointlist_path = os.path.join(os.getenv("HOME"),'data','pointing_model','25_point_denser_near_zenith_spaced_pointing_model_points.txt')
    
    model_alt, model_az = np.loadtxt(pointlist_path, unpack = True, delimiter = ',')
    """
    pointlist_filepath = os.path.join(os.getenv("HOME"), config['pointing_model']['default_pointlist'])
    pointingModelBuilder.load_point_list(pointlist_filepath)
    